---
- name: play
  hosts: localhost
  vars:
    secrets: False
    connectors: False
    templates: False
    pipelines: False
    services: False
    environments: True
    env_groups: False
    overrides: True
    # Licensed features
    roles: False
  tasks:
# Licensed feature so not everyone can test this. 
#    - name: create org
#      karcadia.harness.org:
#        state: present
#        id: demo_org

    - name: Create project (check)
      karcadia.harness.project:
        state: present
        id: demo_project
        org: default
        description: demo description
        tags:
          builtby: harness-iac
      check_mode: True
      register: check_create_project

    - name: debug check_create_project
      debug:
        var: check_create_project

    - name: Create project (does not use env vars)
      karcadia.harness.project:
        state: present
        id: demo_project
        org: default
        description: demo description
# If we need to test providing the authentication directly to the module.
#        account_id: abc123
#        api_key: abc123
        tags:
          builtby: harness-iac
      environment:
      register: create_project

    - name: debug create_project
      debug:
        var: create_project

# Move to import that can be toggled.
# Backup Project
    # - name: backup project (check)
    #   karcadia.harness.backup_project:
    #     id: bob
    #     org: default
    #   check_mode: True
    #   register: check_backup_project

    # - name: debug check_backup_project
    #   debug:
    #     var: check_backup_project

    # - name: backup project
    #   karcadia.harness.backup_project:
    #     id: bob
    #     org: default
    #   register: backup_project

    # - name: debug backup_project
    #   debug:
    #     var: backup_project

    - name: Secrets
      include_tasks: tasks/secrets.yaml
      when: secrets

    - name: Connectors
      include_tasks: tasks/connectors.yaml
      when: connectors

    - name: Roles
      include_tasks: tasks/roles.yaml
      when: roles

    - name: Templates
      include_tasks: tasks/templates.yaml
      when: templates

    - name: Environments
      include_tasks: tasks/environments.yaml
      when: environments

    - name: Environment Groups
      include_tasks: tasks/env_groups.yaml
      when: env_groups

    - name: Overrides
      include_tasks: tasks/overrides.yaml
      when: overrides

## Begin pipelines
# Pipelines are project-level only.

    - name: Create pipeline (check)
      karcadia.harness.pipeline:
        state: present
        id: demo_pipeline
        org: default
        project: demo_project
        description: "demo description"
        tags:
          builtby: harness-iac
        pipeline_yaml: "{{ lookup('file', 'pipeline_deploy.yaml') }}"
        git_details:
          store_type: INLINE
      check_mode: True
      register: check_create_pipeline
      when: pipelines

    - name: debug check_create_pipeline
      debug:
        var: check_create_pipeline
      when: pipelines

    - name: Create pipeline
      karcadia.harness.pipeline:
        state: present
        id: demo_pipeline
        org: default
        project: demo_project
        description: "demo description"
        tags:
          builtby: harness-iac
        pipeline_yaml: "{{ lookup('file', 'pipeline_deploy.yaml') }}"
        git_details:
          store_type: INLINE
      register: create_pipeline
      when: pipelines

    - name: debug create_pipeline
      debug:
        var: create_pipeline
      when: pipelines

    - name: Delete pipeline (check)
      karcadia.harness.pipeline:
        state: absent
        id: demo_pipeline
        org: default
        project: demo_project
      check_mode: True
      register: check_delete_pipeline
      when: pipelines

    - name: debug check_delete_pipeline
      debug:
        var: check_delete_pipeline
      when: pipelines

    - name: Delete pipeline
      karcadia.harness.pipeline:
        state: absent
        id: demo_pipeline
        org: default
        project: demo_project
      register: delete_pipeline
      when: pipelines

    - name: debug delete_pipeline
      debug:
        var: delete_pipeline
      when: pipelines
## End pipelines
## Begin services
# Account
    - name: Create account-level service (check)
      karcadia.harness.service:
        state: present
        id: demo_account_service
        description: demo description
        yaml:
          service:
            name: demo_account_service
            identifier: demo_account_service
      check_mode: True
      register: check_account_create_service
      when: services

    - name: debug check_account_create_service
      debug:
        var: check_account_create_service
      when: services

    - name: Create account-level service
      karcadia.harness.service:
        state: present
        id: demo_account_service
        description: demo description
        yaml:
          service:
            name: demo_account_service
            identifier: demo_account_service
      register: create_account_service
      when: services

    - name: debug create_account_service
      debug:
        var: create_account_service
      when: services

    - name: Delete account-level service (check)
      karcadia.harness.service:
        state: absent
        id: demo_account_service
      check_mode: True
      register: check_account_delete_service
      when: services

    - name: debug check_account_delete_service
      debug:
        var: check_account_delete_service
      when: services

    - name: Delete account-level service
      karcadia.harness.service:
        state: absent
        id: demo_account_service
      register: account_delete_service
      when: services

    - name: debug account_delete_service
      debug:
        var: account_delete_service
      when: services
# Org
## Final Cleanup
    - name: Delete project-level secret
      karcadia.harness.secret:
        state: absent
        id: demo_secret
        org: default
        project: demo_project
      register: project_delete_secret
      when: secrets

    - name: debug project_delete_secret
      debug:
        var: project_delete_secret
      when: secrets

    - name: Delete project (check)
      karcadia.harness.project:
        state: absent
        id: demo_project
        org: default
      check_mode: True
      register: check_delete_project

    - name: debug check_delete_project
      debug:
        var: check_delete_project

    - name: Delete project
      karcadia.harness.project:
        state: absent
        id: demo_project
        org: default
      register: delete_project

    - name: debug delete_project
      debug:
        var: delete_project

    - name: Delete account-level secret
      karcadia.harness.secret:
        state: absent
        id: demo_account_secret
      register: account_delete_secret
      when: secrets

    - name: debug account_delete_secret
      debug:
        var: account_delete_secret
      when: secrets

    - name: Delete org-level secret
      karcadia.harness.secret:
        state: absent
        id: demo_org_secret
        org: default
      register: org_delete_secret
      when: secrets

    - name: debug org_delete_secret
      debug:
        var: org_delete_secret
      when: secrets

# Licensed feature
#    - name: delete org
#      karcadia.harness.org:
#        state: absent
#        id: demo_org
